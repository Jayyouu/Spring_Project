<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bbs.mappers.bbs">

	<!-- 유저 아이디 중복체크 SQL -->
	<!-- <select id : select 작업의 이름, resultType: 반환타입 >-->
	<!-- WHERE 문에 ? 대신 #{밸류값} -->
	<select id="idCheck" resultType="string">
		SELECT	user_id
		FROM	USERS
		WHERE	user_id = #{user_id}
	</select>
	
	<!-- 이메일 인증번호 불러오기 SQL -->
	<!-- resultType="int" : Integer, "_int" : 원래 알던 int -->
	<select id="getAuthnum" resultType="int">	
		SELECT	auth_num
		FROM	AUTHMAIL
		WHERE	user_mail = #{user_mail}
	</select>
	
	<!-- 이메일 인증번호 저장 SQL -->
	<insert id="setAuthnum">
		INSERT INTO AUTHMAIL
		VALUES (#{user_mail}, #{auth_num})
	</insert>	
	
	<!-- 이메일 인증번호 수정하기 SQL -->
	<update id="resetAuthnum">
		UPDATE 	AUTHMAIL
		SET 	auth_num  = #{auth_num}
		WHERE	user_mail = #{user_mail}
	</update>
	
	<!-- 이메일 인증번호 삭제 SQL -->
	<delete id="deleteAuthmail">
		DELETE FROM AUTHMAIL
		WHERE  user_mail = #{user_mail}	
	</delete>	
	
	<!-- 회원가입 SQL -->
	<insert id="join">
		INSERT INTO USERS
		VALUES(#{user_id}, #{user_pw}, #{user_name},#{user_gender},#{user_email},#{user_addr})
	</insert>
	
	<!-- 로그인 SQL -->
	<!-- 
	DB 테이블의 컬럼을 자바에서 Bean으로 관리함
	users라는 객체의 타입으로 반환됨	
	패키지의 절대 경로로 관리 com.bbs.vo.Users -> 타입으로 사용 가능
	 -->
	<select id="login" resultType="Users">
		SELECT 	* 
		FROM	USERS
		WHERE	user_id = #{user_id}
		AND		user_pw = #{user_pw}
	</select>
	
	<!-- resultType 간편화 : mybatis-config에서 해줌 -->
	
	<!-- 게시물 쓰기 -->
	<!-- MySQL에서 현재시간 값은 now()함수 이용함 -->
	<insert id="write">
		INSERT INTO BOARDER(writer, title, contents, reg_date, likey, available)
		VALUES (#{writer}, #{title}, #{contents}, now(), 0, 0)
		<!-- selectkey : primarykey를 select 해옴 -->
		<!-- Property : Bean의 속성 , 
		keyProperty : 빈에서 어떠한 속성을 키로 사용할것인지-->
		<selectKey keyProperty="boarder_id" resultType="_int" order="AFTER">
			<!-- SELECT LAST_INSERT_ID() : 
			MySQL에서 commit 되지 않은 상태의 트랜젝션에서 자동생선된 마지막값을 가져오는 기능 -->
			SELECT LAST_INSERT_ID()
		</selectKey>
		<!-- LAST_INSERT_ID 한 boarder_id가 boarder 객체에 저장됨 -->
	</insert>
	
	<!-- 파일 업로드 SQL (id : fileUpload) -->
	<!-- boarder_id, file_name, file_realName, count -->
	<insert id="fileUpload">
		INSERT INTO UPLOADFILE(boarder_id, file_name, file_realName, count)
		VALUES(#{boarder_id}, #{file_name}, #{file_realName}, 0)
	</insert>
	
	<!-- 게시물 불러오기 SQL (id : getBoarder)-->
	<select id="getBoarder" parameterType="int" resultType="Boarder">
		SELECT 	* 
		FROM 	BOARDER
		WHERE	boarder_id = #{boarder_id}
		AND		available = 0
		<!-- available = 0인 것만 불러옴(삭제되지 않은) -->
	</select>
	
	<!-- 첨부파일 불러오기 SQL (id : getUploadFile, 조건 : boarder_id ?) -->
	<select id="getUploadFile" resultType="UploadFile">
		SELECT 	*
		FROM	UPLOADFILE
		WHERE	boarder_id = #{boarder_id}
	</select>
	
	<!-- 첨부파일 불러오기 SQL (id : getUploadFileReal, 조건 : file_realName ?)-->
	<select id="getUploadFileReal" resultType="UploadFile">
		SELECT 	*
		FROM	UPLOADFILE
		WHERE	file_realName = #{file_realName}
	</select>
	
	<!-- 게시물 수정하기 SQL (id : updateBoarder) , BOARDER 테이블의 contents, title 수정, boarder_id 기준-->
	<update id="updateBoarder">
		UPDATE  BOARDER
		SET		title = #{title}, contents = #{contents}
		WHERE	boarder_id = #{boarder_id}
	</update>
	
</mapper>
  
  
  
  
  
  
  
  
  
  
  